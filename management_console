To add **console policies** to your existing MLOps execution management policy, we need to ensure that the console policies include **read-only access** for monitoring and viewing resources, as well as **create/delete actions** for managing resources via the console. The console policies should reuse statements from the execution policy but focus on actions that are relevant for console-based operations.

Below is the updated policy with **console-specific permissions** added:

### Updated Policy with Console Permissions
```json
{
    "iam_policy_name": "iam-${lob}-${appid}-${region}-${appname}-mlops_console_resource_management",
    "description": "This IAM policy provides permissions to interact with AWS services such as SageMaker, CloudWatch, S3, Secrets Manager, and ECR via the AWS Management Console, including read-only access and create/delete actions.",
    "policy_document": {
        "Version": "2012-10-17",
        "Statement": [
            {
                "Sid": "MLFlowConsoleAccess",
                "Effect": "Allow",
                "Action": [
                    "sagemaker:DescribeMlflowTrackingServer",
                    "sagemaker:StartMlflowTrackingServer",
                    "sagemaker:StopMlflowTrackingServer",
                    "sagemaker-mlflow:AccessUI",
                    "sagemaker-mlflow:CreateExperiment",
                    "sagemaker-mlflow:SearchExperiments",
                    "sagemaker-mlflow:GetExperiment",
                    "sagemaker-mlflow:GetExperimentByName",
                    "sagemaker-mlflow:RestoreExperiment",
                    "sagemaker-mlflow:UpdateExperiment",
                    "sagemaker-mlflow:CreateRun",
                    "sagemaker-mlflow:RestoreRun",
                    "sagemaker-mlflow:GetRun",
                    "sagemaker-mlflow:LogMetric",
                    "sagemaker-mlflow:LogBatch",
                    "sagemaker-mlflow:LogModel",
                    "sagemaker-mlflow:LogInputs",
                    "sagemaker-mlflow:SetExperimentTag",
                    "sagemaker-mlflow:SetTag",
                    "sagemaker-mlflow:LogParam",
                    "sagemaker-mlflow:GetMetricHistory",
                    "sagemaker-mlflow:SearchRuns",
                    "sagemaker-mlflow:ListArtifacts",
                    "sagemaker-mlflow:UpdateRun",
                    "sagemaker-mlflow:CreateRegisteredModel",
                    "sagemaker-mlflow:GetRegisteredModel",
                    "sagemaker-mlflow:RenameRegisteredModel",
                    "sagemaker-mlflow:UpdateRegisteredModel",
                    "sagemaker-mlflow:GetLatestModelVersions",
                    "sagemaker-mlflow:CreateModelVersion",
                    "sagemaker-mlflow:GetModelVersion",
                    "sagemaker-mlflow:UpdateModelVersion",
                    "sagemaker-mlflow:SearchModelVersions",
                    "sagemaker-mlflow:GetDownloadURIForModelVersionArtifacts",
                    "sagemaker-mlflow:TransitionModelVersionStage",
                    "sagemaker-mlflow:SearchRegisteredModels",
                    "sagemaker-mlflow:SetRegisteredModelTag",
                    "sagemaker-mlflow:SetRegisteredModelAlias",
                    "sagemaker-mlflow:GetModelVersionByAlias"
                ],
                "Resource": "arn:aws:sagemaker:${region}:${aws_account_id}:mlflow-tracking-server/*",
                "Condition": {
                    "StringEquals": {
                        "sagemaker:ResourceTag/ModelGroup": "ModelGroupA"
                    }
                }
            },
            {
                "Sid": "S3ConsoleAccess",
                "Effect": "Allow",
                "Action": [
                    "s3:CreateBucket",
                    "s3:DeleteBucket",
                    "s3:ListBucket",
                    "s3:GetBucketAcl",
                    "s3:GetBucketLocation",
                    "s3:GetBucketTagging"
                ],
                "Resource": "arn:aws:s3:::*"
            },
            {
                "Sid": "SecretsManagerConsoleAccess",
                "Effect": "Allow",
                "Action": [
                    "secretsmanager:CreateSecret",
                    "secretsmanager:DeleteSecret",
                    "secretsmanager:DescribeSecret",
                    "secretsmanager:GetSecretValue",
                    "secretsmanager:ListSecrets"
                ],
                "Resource": "arn:aws:secretsmanager:${region}:${aws_account_id}:secret:/secret/sagemaker/${env}/${region}/*",
                "Condition": {
                    "StringEqualsIgnoreCase": {
                        "aws:ResourceTag/OwnerSM": "$${aws:userid}"
                    }
                }
            },
            {
                "Sid": "ECRConsoleAccess",
                "Effect": "Allow",
                "Action": [
                    "ecr:CreateRepository",
                    "ecr:DeleteRepository",
                    "ecr:DescribeRepositories",
                    "ecr:ListImages",
                    "ecr:GetDownloadUrlForLayer"
                ],
                "Resource": "arn:aws:ecr:${region}:${aws_account_id}:repository/*",
                "Condition": {
                    "StringEquals": {
                        "ecr:ResourceTag/DomainId": "$${sagemaker:DomainId}"
                    }
                }
            },
            {
                "Sid": "CloudWatchConsoleAccess",
                "Effect": "Allow",
                "Action": [
                    "cloudwatch:PutMetricAlarm",
                    "cloudwatch:DeleteAlarms",
                    "cloudwatch:DescribeAlarms",
                    "cloudwatch:GetMetricData",
                    "cloudwatch:ListMetrics"
                ],
                "Resource": "*"
            },
            {
                "Sid": "IAMConsoleAccess",
                "Effect": "Allow",
                "Action": [
                    "iam:ListRoles",
                    "iam:PassRole"
                ],
                "Resource": "*",
                "Condition": {
                    "StringEquals": {
                        "iam:PassedToService": "sagemaker.amazonaws.com"
                    }
                }
            },
            {
                "Sid": "EC2ConsoleAccess",
                "Effect": "Allow",
                "Action": [
                    "ec2:CreateNetworkInterface",
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:DeleteNetworkInterface",
                    "ec2:DescribeVpcs",
                    "ec2:DescribeSubnets",
                    "ec2:DescribeSecurityGroups",
                    "ec2:DescribeVpcEndpoints"
                ],
                "Resource": "*"
            },
            {
                "Sid": "KMSConsoleAccess",
                "Effect": "Allow",
                "Action": [
                    "kms:Decrypt",
                    "kms:GenerateDataKey",
                    "kms:ListAliases"
                ],
                "Resource": "arn:aws:kms:${region}:${aws_account_id}:key/*"
            }
        ]
    }
}
```

### Key Additions for Console Policies:
1. **Create/Delete Actions**: Added `Create` and `Delete` actions for SageMaker, S3, Secrets Manager, ECR, and CloudWatch to allow users to manage resources via the console.
2. **Read-Only Actions**: Included `Describe` and `List` actions for monitoring and viewing resources in the console.
3. **Resource Isolation**: Retained conditions (e.g., `aws:userId`, `sagemaker:ResourceTag/ModelGroup`) to ensure users can only manage resources tagged with their execution role.

### Use Case:
This policy is designed for users who need **console access** to manage and monitor MLOps resources. It allows them to **create, delete, and view** resources while maintaining isolation based on resource tags. Attach this policy to roles or users who require console access for managing MLOps workflows.

Let me know if you need further adjustments!
